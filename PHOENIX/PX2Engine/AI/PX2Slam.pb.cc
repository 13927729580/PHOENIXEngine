// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PX2Slam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PX2Slam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SlamProto {

namespace {

const ::google::protobuf::Descriptor* LidarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LidarDataFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarDataFrame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PX2Slam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PX2Slam_2eproto() {
  protobuf_AddDesc_PX2Slam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PX2Slam.proto");
  GOOGLE_CHECK(file != NULL);
  LidarData_descriptor_ = file->message_type(0);
  static const int LidarData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarData, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarData, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarData, distance_),
  };
  LidarData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LidarData_descriptor_,
      LidarData::internal_default_instance(),
      LidarData_offsets_,
      -1,
      -1,
      -1,
      sizeof(LidarData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarData, _internal_metadata_));
  LidarDataFrame_descriptor_ = file->message_type(1);
  static const int LidarDataFrame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarDataFrame, frames_),
  };
  LidarDataFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LidarDataFrame_descriptor_,
      LidarDataFrame::internal_default_instance(),
      LidarDataFrame_offsets_,
      -1,
      -1,
      -1,
      sizeof(LidarDataFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarDataFrame, _internal_metadata_));
  MsgType_descriptor_ = file->enum_type(0);
  Result_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PX2Slam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LidarData_descriptor_, LidarData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LidarDataFrame_descriptor_, LidarDataFrame::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PX2Slam_2eproto() {
  LidarData_default_instance_.Shutdown();
  delete LidarData_reflection_;
  LidarDataFrame_default_instance_.Shutdown();
  delete LidarDataFrame_reflection_;
}

void protobuf_InitDefaults_PX2Slam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  LidarData_default_instance_.DefaultConstruct();
  LidarDataFrame_default_instance_.DefaultConstruct();
  LidarData_default_instance_.get_mutable()->InitAsDefaultInstance();
  LidarDataFrame_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PX2Slam_2eproto_once_);
void protobuf_InitDefaults_PX2Slam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PX2Slam_2eproto_once_,
                 &protobuf_InitDefaults_PX2Slam_2eproto_impl);
}
void protobuf_AddDesc_PX2Slam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PX2Slam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPX2Slam.proto\022\tSlamProto\"<\n\tLidarData\022"
    "\016\n\006Signal\030\001 \001(\005\022\r\n\005Angle\030\002 \001(\002\022\020\n\010Distan"
    "ce\030\003 \001(\002\"6\n\016LidarDataFrame\022$\n\006Frames\030\001 \003"
    "(\0132\024.SlamProto.LidarData*-\n\007MsgType\022\017\n\013C"
    "A_RESERVED\020\000\022\021\n\rCA_SEND_LIDAR\020\013*\023\n\006Resul"
    "t\022\t\n\005RE_OK\020\000b\006proto3", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PX2Slam.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PX2Slam_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PX2Slam_2eproto_once_);
void protobuf_AddDesc_PX2Slam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PX2Slam_2eproto_once_,
                 &protobuf_AddDesc_PX2Slam_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PX2Slam_2eproto {
  StaticDescriptorInitializer_PX2Slam_2eproto() {
    protobuf_AddDesc_PX2Slam_2eproto();
  }
} static_descriptor_initializer_PX2Slam_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}
bool Result_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarData::kSignalFieldNumber;
const int LidarData::kAngleFieldNumber;
const int LidarData::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarData::LidarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PX2Slam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SlamProto.LidarData)
}

void LidarData::InitAsDefaultInstance() {
}

LidarData::LidarData(const LidarData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SlamProto.LidarData)
}

void LidarData::SharedCtor() {
  ::memset(&signal_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&signal_) + sizeof(distance_));
  _cached_size_ = 0;
}

LidarData::~LidarData() {
  // @@protoc_insertion_point(destructor:SlamProto.LidarData)
  SharedDtor();
}

void LidarData::SharedDtor() {
}

void LidarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarData_descriptor_;
}

const LidarData& LidarData::default_instance() {
  protobuf_InitDefaults_PX2Slam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LidarData> LidarData_default_instance_;

LidarData* LidarData::New(::google::protobuf::Arena* arena) const {
  LidarData* n = new LidarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarData::Clear() {
// @@protoc_insertion_point(message_clear_start:SlamProto.LidarData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LidarData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LidarData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(signal_, distance_);

#undef ZR_HELPER_
#undef ZR_

}

bool LidarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SlamProto.LidarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Signal = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Angle;
        break;
      }

      // optional float Angle = 2;
      case 2: {
        if (tag == 21) {
         parse_Angle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Distance;
        break;
      }

      // optional float Distance = 3;
      case 3: {
        if (tag == 29) {
         parse_Distance:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SlamProto.LidarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SlamProto.LidarData)
  return false;
#undef DO_
}

void LidarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SlamProto.LidarData)
  // optional int32 Signal = 1;
  if (this->signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signal(), output);
  }

  // optional float Angle = 2;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // optional float Distance = 3;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  // @@protoc_insertion_point(serialize_end:SlamProto.LidarData)
}

::google::protobuf::uint8* LidarData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SlamProto.LidarData)
  // optional int32 Signal = 1;
  if (this->signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signal(), target);
  }

  // optional float Angle = 2;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // optional float Distance = 3;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SlamProto.LidarData)
  return target;
}

size_t LidarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SlamProto.LidarData)
  size_t total_size = 0;

  // optional int32 Signal = 1;
  if (this->signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signal());
  }

  // optional float Angle = 2;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // optional float Distance = 3;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SlamProto.LidarData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LidarData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SlamProto.LidarData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SlamProto.LidarData)
    UnsafeMergeFrom(*source);
  }
}

void LidarData::MergeFrom(const LidarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SlamProto.LidarData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LidarData::UnsafeMergeFrom(const LidarData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signal() != 0) {
    set_signal(from.signal());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void LidarData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SlamProto.LidarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarData::CopyFrom(const LidarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SlamProto.LidarData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LidarData::IsInitialized() const {

  return true;
}

void LidarData::Swap(LidarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarData::InternalSwap(LidarData* other) {
  std::swap(signal_, other->signal_);
  std::swap(angle_, other->angle_);
  std::swap(distance_, other->distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarData_descriptor_;
  metadata.reflection = LidarData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LidarData

// optional int32 Signal = 1;
void LidarData::clear_signal() {
  signal_ = 0;
}
::google::protobuf::int32 LidarData::signal() const {
  // @@protoc_insertion_point(field_get:SlamProto.LidarData.Signal)
  return signal_;
}
void LidarData::set_signal(::google::protobuf::int32 value) {
  
  signal_ = value;
  // @@protoc_insertion_point(field_set:SlamProto.LidarData.Signal)
}

// optional float Angle = 2;
void LidarData::clear_angle() {
  angle_ = 0;
}
float LidarData::angle() const {
  // @@protoc_insertion_point(field_get:SlamProto.LidarData.Angle)
  return angle_;
}
void LidarData::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:SlamProto.LidarData.Angle)
}

// optional float Distance = 3;
void LidarData::clear_distance() {
  distance_ = 0;
}
float LidarData::distance() const {
  // @@protoc_insertion_point(field_get:SlamProto.LidarData.Distance)
  return distance_;
}
void LidarData::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:SlamProto.LidarData.Distance)
}

inline const LidarData* LidarData::internal_default_instance() {
  return &LidarData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarDataFrame::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarDataFrame::LidarDataFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PX2Slam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SlamProto.LidarDataFrame)
}

void LidarDataFrame::InitAsDefaultInstance() {
}

LidarDataFrame::LidarDataFrame(const LidarDataFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SlamProto.LidarDataFrame)
}

void LidarDataFrame::SharedCtor() {
  _cached_size_ = 0;
}

LidarDataFrame::~LidarDataFrame() {
  // @@protoc_insertion_point(destructor:SlamProto.LidarDataFrame)
  SharedDtor();
}

void LidarDataFrame::SharedDtor() {
}

void LidarDataFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarDataFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarDataFrame_descriptor_;
}

const LidarDataFrame& LidarDataFrame::default_instance() {
  protobuf_InitDefaults_PX2Slam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LidarDataFrame> LidarDataFrame_default_instance_;

LidarDataFrame* LidarDataFrame::New(::google::protobuf::Arena* arena) const {
  LidarDataFrame* n = new LidarDataFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SlamProto.LidarDataFrame)
  frames_.Clear();
}

bool LidarDataFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SlamProto.LidarDataFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SlamProto.LidarData Frames = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Frames;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SlamProto.LidarDataFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SlamProto.LidarDataFrame)
  return false;
#undef DO_
}

void LidarDataFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SlamProto.LidarDataFrame)
  // repeated .SlamProto.LidarData Frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SlamProto.LidarDataFrame)
}

::google::protobuf::uint8* LidarDataFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SlamProto.LidarDataFrame)
  // repeated .SlamProto.LidarData Frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->frames(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SlamProto.LidarDataFrame)
  return target;
}

size_t LidarDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SlamProto.LidarDataFrame)
  size_t total_size = 0;

  // repeated .SlamProto.LidarData Frames = 1;
  {
    unsigned int count = this->frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frames(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarDataFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SlamProto.LidarDataFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LidarDataFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarDataFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SlamProto.LidarDataFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SlamProto.LidarDataFrame)
    UnsafeMergeFrom(*source);
  }
}

void LidarDataFrame::MergeFrom(const LidarDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SlamProto.LidarDataFrame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LidarDataFrame::UnsafeMergeFrom(const LidarDataFrame& from) {
  GOOGLE_DCHECK(&from != this);
  frames_.MergeFrom(from.frames_);
}

void LidarDataFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SlamProto.LidarDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarDataFrame::CopyFrom(const LidarDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SlamProto.LidarDataFrame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LidarDataFrame::IsInitialized() const {

  return true;
}

void LidarDataFrame::Swap(LidarDataFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarDataFrame::InternalSwap(LidarDataFrame* other) {
  frames_.UnsafeArenaSwap(&other->frames_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarDataFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarDataFrame_descriptor_;
  metadata.reflection = LidarDataFrame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LidarDataFrame

// repeated .SlamProto.LidarData Frames = 1;
int LidarDataFrame::frames_size() const {
  return frames_.size();
}
void LidarDataFrame::clear_frames() {
  frames_.Clear();
}
const ::SlamProto::LidarData& LidarDataFrame::frames(int index) const {
  // @@protoc_insertion_point(field_get:SlamProto.LidarDataFrame.Frames)
  return frames_.Get(index);
}
::SlamProto::LidarData* LidarDataFrame::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:SlamProto.LidarDataFrame.Frames)
  return frames_.Mutable(index);
}
::SlamProto::LidarData* LidarDataFrame::add_frames() {
  // @@protoc_insertion_point(field_add:SlamProto.LidarDataFrame.Frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::SlamProto::LidarData >*
LidarDataFrame::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:SlamProto.LidarDataFrame.Frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::SlamProto::LidarData >&
LidarDataFrame::frames() const {
  // @@protoc_insertion_point(field_list:SlamProto.LidarDataFrame.Frames)
  return frames_;
}

inline const LidarDataFrame* LidarDataFrame::internal_default_instance() {
  return &LidarDataFrame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SlamProto

// @@protoc_insertion_point(global_scope)
