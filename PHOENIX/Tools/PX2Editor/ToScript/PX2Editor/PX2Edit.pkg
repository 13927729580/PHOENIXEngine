// PX2Edit.hpp

	class Edit
	// SINGLETON
	{		
	public:
		enum EditType
		{
			ET_SCENE,
			ET_TERRAIN,
			ET_UI,
			ET_SIMULATE,
			ET_PLAY,
			ET_MAXTYPE
		};
		void SetEditType(EditType type);
		EditType GetEditType() const;
		bool CanDoEdit() const;

		enum EditAxisMode
		{
			EAM_WORLD,
			EAM_LOCAL,
			EAM_PARENT,
			EMA_MAX_MODE
		};
		void SetEditAxisMode(EditAxisMode mode);
		EditAxisMode GetEdtiAxisMode() const;

		enum EditMode
		{
			EM_NONE,
			EM_SELECT,
			EM_TRANSLATE,
			EM_ROTATE,
			EM_SCALE,
			EM_MAX_MODE
		};
		void SetEditMode(EditMode mode);
		EditMode GetEditMode() const;
		
		// Pick
	public:
		void SetPickPos(const APoint &pos);
		const APoint &GetPickPos() const;
		APoint GetPickLocalPos(Movable *nodeParent);
		
		// Select
	public:
		void FocusOnSelection();
		bool DeleteSelection();
		
	public:
		enum ChangeDirType
		{
			CDT_ONLYSELECT,
			CDT_TREE_REFRESH,
			CDT_GRID_REFRESH,
			CDT_MAX_TYPE
		};
		void ChangeSelectResDir(const std::string &path, ChangeDirType cdt);
		const std::string &GetSelectedResDir() const;
		void SetSelectPath_ChildFilenames(const std::vector<std::string> &filenamess);
		void SetSelectPath_ChildPaths(const std::vector<std::string> &paths);
		const std::vector<std::string> &GetSelectPath_ChildFilenames() const;
		const std::vector<std::string> &GetSelectPath_ChildPaths() const;

		void SetSelectedResource(const SelectResData &data);
		const SelectResData &GetSelectedResource() const;
		void CopySelectResourcePath();
		
	public:
		void FindSelectInProjTree();
		void FindSelectInResTree();
		
		// undo redo
	public:
		void Undo();
		void Redo();
		
		// Copy
	public:
		void SetCopyObject(Object *obj);
		Object *GetCopyObject();
		void CopyObject();
		void PasteCopyedObject();
		void CloneSelectedObject();
		void SetCopyText(const std::string &copyText);
		const std::string &GetCopyText() const;

		// anim
	public:
		void AnimResetPlay();
		void AnimPlay();
		void AnimStop();
		void AnimReset();
		
		bool IsAnimPlaying();
		void AnimPlayStop();
		
		// time line
	public:
		void MakeSelectTimeLineEdit();
		void TimeLine_UIGroup_Delete();
		void TimeLine_UIGroup_DeleteAll();
		void TimeLine_AddPoint();
		void TimeLine_DeletePoint();
		void TimeLine_SetInValue();
		void TimeLine_SetOutValue();
		
		// opened
	public:
		void AddOpenedFile(const std::string &path);
		bool IsAddedOpenedFile(const std::string &path);
		bool RemoveOpenedFile(const std::string &path);
		void SetActivateOpenedFile(const std::string &path);
		const std::string &GetActivateOpenedFile() const;
	
	public:
		void BroadCastEditorEventRefreshRes();
		void BraodCastEditorEventClearRes();
		void BroadCastEditorEventUp();
		void BroadCastEditorEventDown();
		void BroadCastEditorEventPlayInWindow();		
		void BroadCastEditorSaveText();
		void OpenResIn(const std::string &pathFilename);
		void OpenResOut(const std::string &pathFilename);
	};