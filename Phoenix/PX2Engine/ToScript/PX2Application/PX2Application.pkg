// PX2Application.pkg

	class Application
	{
		// SINGLETON
	public:
	
		enum PlatformType
		{
			PLT_WINDOWS,
			PLT_ANDROID,
			PLT_IOS,
			PLT_MAX_TYPE
		};
		PlatformType GetPlatformType() const;		
		
		GeneralServer *CreateGeneralServer(int port,
			int numMaxConnects, int numMaxMsgHandlers);
		GeneralServer *GetGeneralServer();

		GeneralClientConnector *CreateGeneralClientConnector();
		GeneralClientConnector *GetGeneralClientConnector();

		// Update
	public:
		float GetElapsedTime();

		// screen adjust
	public:
		void SetScreenSize(const Sizef &screenSize);
		const Sizef &GetScreenSize() const;

		// boost
	public:
		enum BoostMode
		{
			BM_APP,
			BM_SERVER,
			BM_MAX_MODE
		};
		BoostMode GetBoostMode() const;
	
		bool LoadBoost(const std::string &filename);
		const Sizef &GetBoostSize() const;
		const std::string &GetBoostProjectName() const;
		AppBoostInfo::PlayLogicMode GetPlayLogicMode() const;
		std::string GetPlayLogicModeStr() const;
		bool IsShowInfo() const;

		void SetBoostProjectName(const std::string &boostProjectName);
		void SetBoostSize(const Sizef &size);
		void SetBoostSize(float width, float height);
		void SetPlayLogicMode(AppBoostInfo::PlayLogicMode mode);
		void SetShowInfo(bool show);

		bool WriteBoost();
		
		// project
	public:
		void NewProject(const std::string &pathname,
			const std::string &projName, int so, int width, int height);
		bool LoadProject(const std::string &pathname);
		bool SaveProject();
		bool SaveProjectAs(const std::string &pathname);
		void CloseProject();
		const std::string &GetProjectFilePath() const;

		void NewScene();
		bool LoadScene(const std::string &pathname);
		bool SaveScene(const std::string &pathname);
		bool SaveSceneAs(const std::string &pathname);
		void CloseScene();

		bool LoadUI(const std::string &pathname);
		void CloseUI();

		// play
	public:
		enum PlayType
		{
			PT_NONE,
			PT_SIMULATE,
			PT_PLAY,
			PT_MAX_TYPE
		};
		void Play(PlayType type);
		PlayType GetPlayType() const;
		
		// menus
	public:
		void Menu_Clear();
		void Menu_AddSubItemCatalogue(
			const std::string &parentAllName,
			const std::string &name,
			const std::string &title);
		void Menu_AddItem(
			const std::string &parentAllName,
			const std::string &name,
			const std::string &title,
			const std::string &script);

		class MenuItem
		{
		public:
			MenuItem();
			~MenuItem();

			void Clear();

			enum Type
			{
				T_SUB,
				T_ITEM,
				T_MAX_TYPE
			};
			Type TheType;

			std::string AllName;

			std::string Name;
			std::string Title;
			std::string Script;

			MenuItem *GetMenuItem(const std::string &parentAllName);
			std::vector<Pointer0<MenuItem> > Items;
		};

		MenuItem *GetMenuItem();
	};