// PX2Arduino.pkg
	
	enum ArduinoRectType
	{
		ART_RECT_DIST,
		ART_RECV_IR,
		ART_MAXZ_TYPE
	};
	
	class Arduino : public Object
	{
		Arduino();
		virtual ~Arduino();

		enum Mode
		{
			M_SERIAL,
			M_BLUETOOTH,
			M_WIFI_ROBOT,
			M_WIFI_TCP, // ESP8266
			M_WIFI_SERVER,
			M_EMPTY,
			M_MAX_TYPE
		};

		bool Initlize(Mode mode, const std::string &port="", int baudrate = 9600);
		bool InitlizeForRobot(int targetRobotID, int udpPort);
		bool InitlizeWifiTCP(const std::string &ip, int port);
		bool InitlizeEmpty();
		bool InitlizeServer(Server *server);
		bool IsInitlized();
		void Terminate();
		void Update(float elapsedSeconds);
		
		void SendToGetNetID();
		void SetNetID(int id);
		int GetNetID() const;

		Mode GetMode() const;
		Serial &GetSerial();
		
		bool AddScriptHandler(const std::string &handler);

		// arduino used -------------------------
	public:
		enum Pin
		{
			P_0 = 0,
			P_1,
			P_2,
			P_3,
			P_4,
			P_5,
			P_6,
			P_7,
			P_8,
			P_9,
			P_10,
			P_11,
			P_12,
			P_13,
			P_A0,
			P_A1,
			P_A2,
			P_A3,
			P_A4,
			P_A5,
			P_MAX_TYPE
		};

		enum PMode
		{
			PM_INPUT,
			PM_OUTPUT,
			PM_MAX_TYPE
		};

		void PinMode(Pin pin, PMode mode);
		void DigitalWrite(Pin pin, bool isHigh = true);
		void AnalogWrite(Pin pin, int val);
		int DigitalRead(Pin pin);
		int AnalogRead(Pin pin);

		// server
		void ServerInit(int i, Pin pin);
		void ServerWrite(int i, int val);

		// dist
		void DistInit(Pin pinTrig, Pin pinEcho);
		void DistTest();
		float GetDist() const;

		// vehicle
		void VehicleInitMotoBoard();
		void VehicleInitMotoBoard4567();
		void VehicleInitMotoBoard298N(Pin pinLA, Pin pinLB, Pin pinLS, Pin pinRA, Pin pinRB, Pin pinRS);
		enum DirectionType
		{
			DT_NONE,
			DT_FORWARD,
			DT_BACKWARD,
			DT_MAX_TYPE
		};

		enum SimpleDirectionType
		{
			SDT_NONE,
			SDT_FORWARD,
			SDT_BACKWARD,
			SDT_LEFT,
			SDT_RIGHT,
			SDT_MAX_TYPE
		};

		void Run(int motoIndex, DirectionType type, int speed);
		void Run(SimpleDirectionType dt, int speed);
		int GetSpeed(int motoIndex) const;
		void Stop();
		
		void MP3Init(Pin pinR, Pin pinT);
		void MP3Play();
		void MP3PlayNext();
		void MP3PlayAtIndex(int index);
		void MP3SetVolume(int volume);
		void MP3Stop();
		
		void IRInit(Pin pinReceive);
		void IRSend(int val);
		int GetIRReceive() const;
		
		void WeightInit(int i, Pin pinOut, Pin pinClk);
		void WeightTest(int i);
		float GetWeight(int i);
		
		const std::string &GetLastSendString();
	};