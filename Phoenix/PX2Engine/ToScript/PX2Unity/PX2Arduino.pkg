// PX2Arduino.pkg
	
	class Arduino : public Object
	{
		Arduino();
		virtual ~Arduino();

		enum Mode
		{
			M_SERIAL,
			M_BLUETOOTH,
			M_WIFI_ROBOT,
			M_MAX_TYPE
		};

		bool Initlize(Mode mode, const std::string &port="", int baudrate = 9600);
		bool InitlizeForRobot(int targetRobotID, int udpPort);
		bool IsInitlized();
		void Terminate();
		void Update(float elapsedSeconds);

		Mode GetMode() const;
		Serial &GetSerial();

		// arduino used -------------------------
	public:
		enum Pin
		{
			P_0 = 0,
			P_1,
			P_2,
			P_3,
			P_4,
			P_5,
			P_6,
			P_7,
			P_8,
			P_9,
			P_10,
			P_11,
			P_12,
			P_13,
			P_A0,
			P_A1,
			P_A2,
			P_A3,
			P_A4,
			P_A5,
			P_MAX_TYPE
		};

		enum PMode
		{
			PM_INPUT,
			PM_OUTPUT,
			PM_MAX_TYPE
		};
		static std::string PinStr[P_MAX_TYPE];
		static std::string PModeStr[PM_MAX_TYPE];

		void PinMode(Pin pin, PMode mode);
		void DigitalWrite(Pin pin, bool isHigh = true);
		void AnalogWrite(Pin pin, int val);
		int DigitalRead(Pin pin);
		int AnalogRead(Pin pin);

		// server
		void ServerInit(int i, Pin pin);
		void ServerWrite(int i, int val);

		// dist
		void DistInit(Pin pinTrig, Pin pinEcho);
		void DistTest();
		float GetDist() const;

		// ir
		void IRRecvInit(Pin pin);
		void IRSendSony(int val = 1);
		int GetIRReceive() const;

		// vehicle
		void VehicleInitMotoBoard();
		enum DirectionType
		{
			DT_NONE,
			DT_FORWARD,
			DT_BACKWARD,
			DT_MAX_TYPE
		};
		static std::string sDirectionTypeStr[DT_MAX_TYPE];

		enum SimpleDirectionType
		{
			SDT_NONE,
			SDT_FORWARD,
			SDT_BACKWARD,
			SDT_LEFT,
			SDT_RIGHT,
			SDT_MAX_TYPE
		};
		static std::string sSimpleDirectionTypeStr[SDT_MAX_TYPE];

		void Run(int motoIndex, DirectionType type, int speed);
		void Run(SimpleDirectionType dt, int speed);
		int GetSpeed(int motoIndex) const;
		void Stop();
	};